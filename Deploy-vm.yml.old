---
- hosts: localhost
  gather_facts: no
  tasks:

#####################################################################
#################### Deploy from VMware Template ####################
#####################################################################
  - name: Clone the template with static network
    vmware_guest:
      hostname: '{{ vcenter }}'
      username: '{{ lookup("env", "VMWARE_USER") }}'
      password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
      validate_certs: False
      name: "{{ vm_hostname }}"
      template: "{{ template_name }}"
      datacenter: "{{ datacenter_name }}"
      folder: /{{ datacenter_name }}/vm
      cluster: "{{ cluster_name }}"
      datastore: "{{ datastore }}"
      hardware:
        memory_mb: "{{ vm_memory }}"
        num_cpus: "{{ vm_cpus }}"
        scsi: paravirtual
        hotadd_cpu: True
        hotremove_cpu: True
        hotadd_memory: True
        boot_firmware: "efi"
      networks:
      - name: "{{ vm_network }}"
        ip: "{{ vm_ip }}"
        netmask: "{{ vm_netmask }}"
        gateway: "{{ vm_gw }}"
        type: "{{ vm_net_type }}"
        dns_servers: "{{ vm_dns }}"
      customization:
        autologon: true
        hostname: "{{ vm_hostname }}"
        dns_servers:
        - "{{ vm_dns }}"
        domain: internal.tinytechlab.uk
        password: "{{ ansible_password }}"
        runonce:
        - powershell.exe -ExecutionPolicy Unrestricted -File D:\Scripts\Ansible\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP
      state: poweredon
      wait_for_ip_address: yes
      wait_for_customization: yes
    delegate_to: localhost
    when: vm_net_type == "static"
    
    
  - name: Clone the template with dhcp network
    vmware_guest:
      hostname: '{{ lookup("env", "VMWARE_HOST") }}'
      username: '{{ lookup("env", "VMWARE_USER") }}'
      password: '{{ lookup("env", "VMWARE_PASSWORD") }}'
      validate_certs: False
      name: "{{ vm_hostname }}"
      template: "{{ template_name }}"
      datacenter: "{{ datacenter_name }}"
      folder: /{{ datacenter_name }}/vm
      cluster: "{{ cluster_name }}"
      datastore: "{{ datastore }}"
      hardware:
        memory_mb: "{{ vm_memory }}"
        num_cpus: "{{ vm_cpus }}"
        scsi: paravirtual
        hotadd_cpu: True
        hotremove_cpu: True
        hotadd_memory: True
        boot_firmware: "efi"
      networks:
      - name: "{{ vm_network }}"
        type: "{{ vm_net_type }}"
        dns_servers: "{{ vm_dns | default(omit) }}"
      customization:
        autologon: true
        hostname: "{{ vm_hostname }}"
        dns_servers:
        - "{{ vm_dns }}"
        domain: uk.wal-mart.com
        password: "{{ ansible_password }}"
        runonce:
        - powershell.exe -ExecutionPolicy Unrestricted -File D:\Scripts\Ansible\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP
      state: poweredon
      wait_for_ip_address: yes
      wait_for_customization: yes
    register: result
    delegate_to: localhost
    when: vm_net_type == "dhcp"
    
  - name: Add host to group
    add_host:
      hostname: "{{ vm_ip }}{{ result.instance.ipv4 }}"
      groups:
      - newVMDeployment
      
  - name: Sleep for 60 seconds to give VM ample time to become reachable
    wait_for:
      timeout: 60
      

#####################################################################
#####################################################################


#####################################################################
################### Stop Puppet & Disable Service ###################
#####################################################################
#
#  - name: Stop Puppet to prevent interference with the build process
#    win_shell: |
#      Stop-Service puppet -Force
#      Set-Service puppet -Force -StartupType Disabled
#      
#####################################################################
#####################################################################


#####################################################################
######################## Domain Check & Join ########################
#####################################################################

- hosts: newVMDeployment
  vars:
    locationDist:
      AH_Lab1: UKAH
      UKDCA-Gen: UKDCA
      UKDCB-Gen: UKDCB
    location: '{{locationDist[datacenter_name | default("Unknown")] | default("") }}'
  gather_facts: yes
  tasks:
    
  - name: Test if computer is domain joined
    win_shell: |
      (gwmi win32_computersystem).partofdomain
    register: isDomainJoined
    when: join_domain == "YES"
    
  - name: Set fact for if computer is domain joined
    set_fact:
      domain_joined: "{{ isDomainJoined.stdout | regex_replace('(\\r\\n)','') }}"
    when: join_domain == "YES"
    
  - name: Report that computer is domain joined
    debug:
      msg: "Computer is already joined to the domain."
    when: domain_joined == true and join_domain == "YES"
    
  - name: Report that computer will be joined to the domain.
    debug:
      msg: "Computer is not joined to any domain, joining now.."
    when: domain_joined == false and join_domain == "YES"
    
  - name: Join Domain
    win_shell: |
      netdom join $env:computername /domain:internal.tinytechlab.uk /UserD:{{ lookup("env", "ANSIBLE_NET_USERNAME") }} /PasswordD:{{ lookup("env", "ANSIBLE_NET_PASSWORD") }} /ou:"OU\=Virtual_Servers,OU\=TinyTechLabUK,DC\=internal,DC\=tinytechlab,DC\=uk"
    when: domain_joined == false and join_domain == "YES"
    
  - name: Report that machine will be rebooted
    debug:
      msg: "Rebooting computer now.."
    when: domain_joined == false and join_domain == "YES"
      
  - name: Reboot machine after domain join
    win_reboot:
      reboot_timeout: 3600
    when: domain_joined == false and join_domain == "YES"
    
  - name: Test if computer is domain joined after reboot
    win_shell: |
      (gwmi win32_computersystem).partofdomain
    register: isDomainJoined
    when: domain_joined == false and join_domain == "YES"
    
  - name: Set fact for if computer is domain joined
    set_fact:
      domain_joined: "{{ isDomainJoined.stdout | regex_replace('(\\r\\n)','') }}"
    when: domain_joined == false and join_domain == "YES"
    
  - name: Report that join domain has failed.
    debug:
      msg: "Domain Join has failed. Please check logs."
    when: domain_joined == false and join_domain == "YES"
    
#####################################################################
#####################################################################


#####################################################################
##################### Post Build Configuration ######################
#####################################################################
    
  - name: Ensure Region is set to en-GB
    win_region:
      location: 242
      format: en-GB
      unicode_language: en-GB
      copy_settings: True
      
  - name: Set timezone to 'GMT Standard Time' (GMT)
    community.windows.win_timezone:
      timezone: GMT Standard Time
    
  - name: Update DNS Search Suffix List
    ansible.windows.win_regedit:
      path: HKLM:\System\CurrentControlSet\Services\TCPIP\Parameters
      name: SearchList
      data: 'internal.tinytechlab.uk,tinytechlab.uk'
      type: expandstring

  - name: Disable IPv6 on all interfaces
    community.windows.win_net_adapter_feature:
      interface: '*'
      state: disabled
      component_id:
      - ms_tcpip6
      
  - name: Disable LMHost Lookup
    ansible.windows.win_regedit:
      path: HKLM:\System\CurrentControlSet\Services\NetBT\Parameters
      name: EnableLMHOSTS
      data: 0
      type: dword
      
  - name: Disable Power Saving on NICs
    win_shell: |
      $nics = Get-WmiObject Win32_NetworkAdapter -filter "AdapterTypeID = '0' AND PhysicalAdapter = 'true'"
      ForEach ($nic in $nics) {
        $nicName = $nic.Name
        Show-Step -Msg "-Disabling NIC Power Save on " -Step $nicName
        Try {
            $nicPower = Get-WmiObject MSPower_DeviceEnable -Namespace root\wmi | Where-Object {$_.instancename -match [regex]::escape($nic.PNPDeviceID) }
            $nicPower.Enable = $False
            $nicPower.psbase.Put() | out-null
            Write-Output "Success"
        }
        Catch {
            Write-Output "Failed"
        }
      }
  - name: Configure Disks (Needs a full review)
    win_shell: |
      if ($env:COMPUTERNAME -match "UKNT55") {
        #Set 25gb disk to SQL BIN
        Get-Disk | Where-Object {$_.partitionstyle -eq 'raw' -and $_.size -eq '26843545600'} | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -DriveLetter E -UseMaximumSize | Format-Volume -FileSystem NTFS -AllocationUnitSize 65536 -NewFileSystemLabel "SQL-BIN-64k" -Confirm:$false -ErrorAction SilentlyContinue | out-null
        #Set other disks to SQL (64k)\MBR for drives less than 2tb
        Get-Disk | Where-Object {$_.partitionstyle -eq 'raw' -and $_.size -lt '2199023255552'} | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -AllocationUnitSize 65536 -NewFileSystemLabel "SQLDisk-64k" -Confirm:$false -ErrorAction SilentlyContinue | out-null
        #Set other disks to SQL (64k)\GPT for drives more than 2tb
        Get-Disk | Where-Object {$_.partitionstyle -eq 'raw' -and $_.size -ge '2199023255552'} | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -AllocationUnitSize 65536 -NewFileSystemLabel "SQLDisk-64k" -Confirm:$false -ErrorAction SilentlyContinue | out-null
      } else {
        #Set other disks MBR for drives less than 2tb 
        Get-Disk | Where-Object {$_.partitionstyle -eq 'raw' -and $_.size -lt '2199023255552'} | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel "Disk" -Confirm:$false -ErrorAction SilentlyContinue | out-null
        #Set other disks GPT for drives more than 2tb 
        Get-Disk | Where-Object {$_.partitionstyle -eq 'raw' -and $_.size -ge '2199023255552'} | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS -NewFileSystemLabel "Disk" -Confirm:$false -ErrorAction SilentlyContinue | out-null
      }
      #Check
      if (!(Get-Disk | Where-Object {$_.partitionstyle -eq 'raw'})) {
        Write-Output "Success"
      } else {
        Write-Output "Failed"
      }
  - name: Add Local Administrators
    ansible.windows.win_group_membership:
      name: Administrators
      members:
 #       - UK\SVC_UK_SSBS
        - INTERNAL\Domain Admins
 #       - Homeoffice\Windows Server Eng
 #       - UK\Mastergrp-UK-Administer Servers
      state: present
      
  - name: Get Hostname
    win_shell: |
      return $ENV:COMPUTERNAME
    register: hostnameResult
    
 # - name: Add SQL DBAs to Local Administrators if required
 #   ansible.windows.win_group_membership:
 #     name: Administrators
 #     members:
 #       - UK\SQL_DBA_UK
 #     state: present
 #   when: hostnameResult is search("UKNT55")
    
  - name: Activate Windows with KMS
    win_shell: |
      cscript C:\Windows\System32\slmgr.vbs /ato
    
#####################################################################
#####################################################################


#####################################################################
######################## Copy necessary files #######################
#####################################################################

  - name: Copy necessary files
    win_shell: |
      $Dir = "\\TTL-FILE-1\Software$\Deploy-VM"
      $Username = '{{ lookup("env", "VMWARE_USER") }}'
      $Password = '{{ lookup("env", "VMWARE_PASSWORD") }}'
      [securestring]$Password = ConvertTo-SecureString $Password -AsPlainText -Force
      [pscredential]$Credentials = New-Object System.Management.Automation.PSCredential ($Username, $Password)
      New-PSDrive -Name "U" -Root $Dir -PSProvider "FileSystem" -Credential $Credentials
      if (!(Test-Path C:\Install)) {New-Item C:\Install -ItemType Directory}
      Copy-Item -Path U:\Apps -Destination C:\Install -Recurse
      Remove-PSDrive -Name "U"      
#####################################################################
#####################################################################


#####################################################################
########################### Install Apps ############################
#####################################################################

#  - name: Install Netbackup
#    win_shell: |
#      $App = "D:\Install\Apps\NetBackup"
#      $InstalledNBU = Get-WMIobject -Class Win32_Product -filter "Name ='Veritas NetBackup Client'" -ErrorAction SilentlyContinue
#      if (!($InstalledNBU)) {
#        if (Test-Path $App) {
#          #Start install of client based on location
#          $Location = "{{ location }}"
#          if ($Location -eq "UKAH") {$pssession = start-process "$App\ahdefaultsilentclient.bat" -wait -PassThru -WindowStyle Hidden}
#          elseif ($Location -eq "UKGH") {$pssession = start-process "$App\ghdefaultsilentclient.bat" -wait -PassThru -WindowStyle Hidden}
#          elseif ($Location -eq "UKDR") {$pssession = start-process "$App\drdefaultsilentclient.bat" -wait -PassThru -WindowStyle Hidden}
#          elseif ($Location -eq "UKDCA") {$pssession = start-process "$App\dcadefaultsilentclient.bat" -wait -PassThru -WindowStyle Hidden}
#          elseif ($Location -eq "UKDCB") {$pssession = start-process "$App\dcbdefaultsilentclient.bat" -wait -PassThru -WindowStyle Hidden}
#          elseif ($Location -eq "Unknown") {return "Unknown Location! Check Mappings."}
#          if($pssession.exitcode -eq "0"){
#              Write-Host "Installed successfully."
#          }
#          else {
#              Write-Host "Finished with error: [$($pssession.exitcode)]"
#          }
#        }
#      } else {
#        Write-Host "Already Installed."
#      }
#      
#  - name: Install Symantec AV
#    win_shell: |
#      $App = "D:\Install\Apps\SymantecEndpointProtection"
#      $Agent = Get-WMIobject -Class Win32_Product -filter "Name ='McAfee Agent'" -ErrorAction SilentlyContinue
#      if (!($Agent)) {
#        if (Test-Path $App) {
#          $FramePkg = (Get-ChildItem -Path $App | Where-Object {$_.Name -like "*FramePkg*"}).Name
#          if (!($FramePkg)) {
#            Write-Host "Installing McAfee.."
#            $Timeout = "5"
#            while (Get-Process -name "Framepkg") {
#              $Count = $Count + 5
#              if ($Count -ge $Timeout) {
#                Write-Host "Installation timeout"
#                break
#              } else {
#                Wait-Event 5
#              }
#            }
#            Wait-Event $Timeout
#          } else {
#           Write-Host "Unable to find FramePkg."
#          }
#          $Agent = Get-WMIobject -Class Win32_Product -filter "Name ='McAfee Agent'" -ErrorAction SilentlyContinue
#          if($Agent){
#            Write-Host "Installed successfully."
#          } else {
#            Write-Host "Installation failed."
#          }
#        }
#      } else {
#        Write-Host "Already Installed."
#      }
 #     
 # - name: Install Gemalto SafeNet Client
 #   win_shell: |
 #     $MSIPath = "D:\Install\Apps\Gemalto\SafeNet10.5-x64-10.5-Walmart.msi"
 #     $MSIArgs = "/quiet /norestart"
 #     $GetCurrentInstall = Get-WmiObject Win32_Product | where {$_.IdentifyingNumber -eq "{F0DD70BB-4BC5-4A31-AE15-BB1A401CF698}"}
 #       if(!($GetCurrentInstall)) {
 #         Write-Host "Installing Gemalto SafeNet.."
 #         Start-Process $MSIPath -ArgumentList $MSIArgs -Wait
 #         $GetCurrentInstall = Get-WmiObject Win32_Product | where {$_.IdentifyingNumber -eq "{F0DD70BB-4BC5-4A31-AE15-BB1A401CF698}"}
 #         if ($GetCurrentInstall) {
 #           Write-Host "Installed Successfully."
 #         } else {
 #           Write-Host "Installation Failed."
 #         }
 #       } else {
 #         Write-Host "Already installed."
 #       }
        
  - name: Install BG-Info
    win_shell: | 
      $Source = "D:\Install\Apps\BGInfo\BG_Info.cmd"
      $Dest = "C:\Users\All Users\Start Menu\programs\StartUp\BG_Info.cmd"
      if (!(Test-Path $Dest)) {
        Try {
          Write-Host "Installing BG-Info.."
          Copy-Item $Source $Dest -Force -Confirm:$false
          if (Test-Path $Dest) {
            Write-Host "Installed Successfully."
          } else {
            Write-Host "Installation Failed."
          }
        }
        Catch {
          Write-Host "Failed."
        }
      }
      else {
        Write-Host "Already Installed."
      }
#####################################################################
#####################################################################


#####################################################################
################## Post App Install Configuration ###################
#####################################################################
#
#  - name: Configure SCCM Client Site
#    win_shell: |
#      $sms = new-object –comobject “Microsoft.SMS.Client”
#      $sccmsite = "H01"
#      Try {
#        $SMSCode = $sms.GetAssignedSite()
#        If ($SMSCode -ne "$sccmsite") {
#          $sms.SetAssignedSite($sccmsite)
#        }
#      }
#      Catch {
#        $sms.SetAssignedSite($sccmsite)
#      }
#      $sms = new-object –comobject “Microsoft.SMS.Client”
#      $SMSCode = $sms.GetAssignedSite()
#      if ($SMSCode -eq $sccmsite) {
#        Write-Host "Passed."
#      } else {
#        Write-Host "Failed."
#      }
#####################################################################
#####################################################################


#####################################################################
############################# Patching ##############################
#####################################################################

  - name: Reboot machine prior to patching
    win_reboot:
      reboot_timeout: 3600

  - name: Install all security & critical updates with automatic reboots
    ansible.windows.win_updates:
      category_names: '*'
      reboot: yes
      reboot_timeout: 3600
      
      
      
      
      
#####################################################################
################### Start Puppet & Enable Service ###################
######################## & Run Config Update ########################
#####################################################################

  - name: Enable Puppet, start it & and run configuration update
    win_shell: |
      Set-Service puppet -Force -StartupType Automatic
      Start-Service puppet -Force
      puppet agent -t
      
#####################################################################
#####################################################################